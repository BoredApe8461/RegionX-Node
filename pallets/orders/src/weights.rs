// This file is part of RegionX.
//
// RegionX is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// RegionX is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with RegionX.  If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for `pallet_orders`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2024-06-03, STEPS: `20`, REPEAT: `50`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("regionx-rococo")`, DB CACHE: `1024`

// Executed Command:
// ./target/release/regionx-node
// benchmark
// pallet
// --pallet
// pallet-orders
// --extrinsic
// *
// --template
// ./config/frame-weight-template.hbs
// --output
// ./pallets/orders/src/weights.rs
// --steps
// 20
// --repeat
// 50
// --header
// ./config/HEADER-GPL3
// --chain
// regionx-rococo
// --wasm-execution
// compiled
// --heap-pages
// 4096

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_orders`.
pub trait WeightInfo {
	fn create_order() -> Weight;
	fn cancel_order() -> Weight;
	fn contribute() -> Weight;
	fn remove_contribution() -> Weight;
}

/// Weights for `pallet_orders` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `Tokens::Accounts` (r:2 w:2)
	/// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	/// Storage: `AssetRegistry::Metadata` (r:1 w:0)
	/// Proof: `AssetRegistry::Metadata` (`max_values`: None, `max_size`: Some(737), added: 3212, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Orders::NextOrderId` (r:1 w:1)
	/// Proof: `Orders::NextOrderId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Orders::Orders` (r:0 w:1)
	/// Proof: `Orders::Orders` (`max_values`: None, `max_size`: Some(66), added: 2541, mode: `MaxEncodedLen`)
	fn create_order() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `558`
		//  Estimated: `6156`
		// Minimum execution time: 52_830_000 picoseconds.
		Weight::from_parts(53_372_000, 6156)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: `Orders::Orders` (r:1 w:1)
	/// Proof: `Orders::Orders` (`max_values`: None, `max_size`: Some(66), added: 2541, mode: `MaxEncodedLen`)
	fn cancel_order() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `192`
		//  Estimated: `3531`
		// Minimum execution time: 16_690_000 picoseconds.
		Weight::from_parts(17_010_000, 3531)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Orders::Orders` (r:1 w:0)
	/// Proof: `Orders::Orders` (`max_values`: None, `max_size`: Some(66), added: 2541, mode: `MaxEncodedLen`)
	/// Storage: `ParachainSystem::ValidationData` (r:1 w:0)
	/// Proof: `ParachainSystem::ValidationData` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainSystem::LastRelayChainBlockNumber` (r:1 w:0)
	/// Proof: `ParachainSystem::LastRelayChainBlockNumber` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Tokens::Accounts` (r:1 w:1)
	/// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	/// Storage: `AssetRegistry::Metadata` (r:1 w:0)
	/// Proof: `AssetRegistry::Metadata` (`max_values`: None, `max_size`: Some(737), added: 3212, mode: `MaxEncodedLen`)
	/// Storage: `Orders::Contributions` (r:1 w:1)
	/// Proof: `Orders::Contributions` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	/// Storage: `Orders::TotalContributions` (r:1 w:1)
	/// Proof: `Orders::TotalContributions` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	fn contribute() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `648`
		//  Estimated: `4202`
		// Minimum execution time: 52_821_000 picoseconds.
		Weight::from_parts(53_962_000, 4202)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `Orders::Orders` (r:1 w:0)
	/// Proof: `Orders::Orders` (`max_values`: None, `max_size`: Some(66), added: 2541, mode: `MaxEncodedLen`)
	/// Storage: `Orders::Contributions` (r:1 w:1)
	/// Proof: `Orders::Contributions` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	/// Storage: `Tokens::Accounts` (r:1 w:1)
	/// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	/// Storage: `AssetRegistry::Metadata` (r:1 w:0)
	/// Proof: `AssetRegistry::Metadata` (`max_values`: None, `max_size`: Some(737), added: 3212, mode: `MaxEncodedLen`)
	/// Storage: `Orders::TotalContributions` (r:1 w:1)
	/// Proof: `Orders::TotalContributions` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	fn remove_contribution() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `649`
		//  Estimated: `4202`
		// Minimum execution time: 47_791_000 picoseconds.
		Weight::from_parts(48_378_000, 4202)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `Tokens::Accounts` (r:2 w:2)
	/// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	/// Storage: `AssetRegistry::Metadata` (r:1 w:0)
	/// Proof: `AssetRegistry::Metadata` (`max_values`: None, `max_size`: Some(737), added: 3212, mode: `MaxEncodedLen`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `Orders::NextOrderId` (r:1 w:1)
	/// Proof: `Orders::NextOrderId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `Orders::Orders` (r:0 w:1)
	/// Proof: `Orders::Orders` (`max_values`: None, `max_size`: Some(66), added: 2541, mode: `MaxEncodedLen`)
	fn create_order() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `558`
		//  Estimated: `6156`
		// Minimum execution time: 52_830_000 picoseconds.
		Weight::from_parts(53_372_000, 6156)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: `Orders::Orders` (r:1 w:1)
	/// Proof: `Orders::Orders` (`max_values`: None, `max_size`: Some(66), added: 2541, mode: `MaxEncodedLen`)
	fn cancel_order() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `192`
		//  Estimated: `3531`
		// Minimum execution time: 16_690_000 picoseconds.
		Weight::from_parts(17_010_000, 3531)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `Orders::Orders` (r:1 w:0)
	/// Proof: `Orders::Orders` (`max_values`: None, `max_size`: Some(66), added: 2541, mode: `MaxEncodedLen`)
	/// Storage: `ParachainSystem::ValidationData` (r:1 w:0)
	/// Proof: `ParachainSystem::ValidationData` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `ParachainSystem::LastRelayChainBlockNumber` (r:1 w:0)
	/// Proof: `ParachainSystem::LastRelayChainBlockNumber` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Tokens::Accounts` (r:1 w:1)
	/// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	/// Storage: `AssetRegistry::Metadata` (r:1 w:0)
	/// Proof: `AssetRegistry::Metadata` (`max_values`: None, `max_size`: Some(737), added: 3212, mode: `MaxEncodedLen`)
	/// Storage: `Orders::Contributions` (r:1 w:1)
	/// Proof: `Orders::Contributions` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	/// Storage: `Orders::TotalContributions` (r:1 w:1)
	/// Proof: `Orders::TotalContributions` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	fn contribute() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `648`
		//  Estimated: `4202`
		// Minimum execution time: 52_821_000 picoseconds.
		Weight::from_parts(53_962_000, 4202)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `Orders::Orders` (r:1 w:0)
	/// Proof: `Orders::Orders` (`max_values`: None, `max_size`: Some(66), added: 2541, mode: `MaxEncodedLen`)
	/// Storage: `Orders::Contributions` (r:1 w:1)
	/// Proof: `Orders::Contributions` (`max_values`: None, `max_size`: Some(84), added: 2559, mode: `MaxEncodedLen`)
	/// Storage: `Tokens::Accounts` (r:1 w:1)
	/// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	/// Storage: `AssetRegistry::Metadata` (r:1 w:0)
	/// Proof: `AssetRegistry::Metadata` (`max_values`: None, `max_size`: Some(737), added: 3212, mode: `MaxEncodedLen`)
	/// Storage: `Orders::TotalContributions` (r:1 w:1)
	/// Proof: `Orders::TotalContributions` (`max_values`: None, `max_size`: Some(36), added: 2511, mode: `MaxEncodedLen`)
	fn remove_contribution() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `649`
		//  Estimated: `4202`
		// Minimum execution time: 47_791_000 picoseconds.
		Weight::from_parts(48_378_000, 4202)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
}
